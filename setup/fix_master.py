#!/usr/bin/python
import os, string, ConfigParser, subprocess

config_file = '/etc/datacenter.ini'
config = ConfigParser.ConfigParser()
config.readfp(open(config_file))

n = config.get('master-conf', 'host')
u = config.get('master-conf', 'unit')
e = config.get('master-conf', 'env')
c = config.get('master-conf', 'class')
t = config.get('master-conf', 'tld')
d = config.get('master-conf', 'dc')

## change this to arange hostname order
basehost = ("%s%s%s" %(d,e,c))
hostname = ("%s%s"%(basehost,n))
domain = ("%s%s.%s" %(u,e,t))
fqdn = ("%s.%s" %(hostname,domain))

ip = subprocess.Popen( "/usr/bin/facter ipaddress", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]

ipaddr = ip.strip("\n")

hosts_file = open('/etc/hosts', "w")
print >> hosts_file, '# autogenerated file, chagnes will be overwritten at boot'
print >> hosts_file, '127.0.0.1  localhost  localhost.localdomain'
print >> hosts_file, '%s %s %s' %(ipaddr, fqdn, hostname)
hosts_file.close()

resolv_conf = open('/etc/resolv.conf', "w")
print >> resolv_conf, 'domain %s' %(domain)
print >> resolv_conf, 'nameserver %s' %(ipaddr)
resolv_conf.close()

master_zone = ("/var/named/zones/master/%s%s.internal.zone.db" %(u,e))
clean_zone = ("/bin/sed -i -e '/^ns1/d' %s" %(master_zone))
subprocess.Popen( clean_zone, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]

fileHandle = open ( master_zone, 'a')
fileHandle.write ( 'ns1\t\tIN\tA\t%s\n' %(ipaddr))
fileHandle.close()

#command = ("/scripts/set_master_dnsname.py -i %s -H %s" %(ipaddr, hostname))
#subprocess.Popen( command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]
named_restart = subprocess.Popen( "/bin/hostname %s" %(hostname), shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]
named_restart = subprocess.Popen( "/bin/domainname %s" %(domain), shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]
named_restart = subprocess.Popen( "/etc/init.d/syslog restart", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]
named_restart = subprocess.Popen( "/etc/init.d/named restart", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0]
print named_restart
